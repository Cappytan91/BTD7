package com.jason.btd7.sounds;

import java.applet.AudioClip;
import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.SourceDataLine;
/** <p>An object implementing {@link AudioClip java.applet.AudioClip} with the data from pop.wav hard-coded into it.</p>
 * <p>Created with the <a href="http://stephengware.com/projects/soundtoclass">SoundToClass tool</a>, by Stephen G. Ware.</p>
 * @author Stephen G. Ware */
public class pop implements AudioClip {
	private byte[] data;
	private AudioFormat format;
	private DataLine.Info lineInfo = null;
	private PlayThread playThread = null;
	private LoopThread loopThread = null;
	private static final long serialVersionUID = 11044;
	private static byte[] data0(){ return new byte[] {2,0,9,0,9,0,10,0,12,0,8,0,-2,-1,-8,-1,-9,-1,-7,-1,-5,-1,-3,-1,1,0,9,0,7,0,-5,-1,-12,-1,-4,-1,6,0,14,0,21,0,13,0,-12,-1,-30,-1,-26,-1,-9,-1,11,0,30,0,31,0,12,0,-11,-1,-24,-1,-23,-1,-15,-1,-5,-1,5,0,12,0,14,0,13,0,13,0,1,0,-18,-1,-26,-1,-14,-1,0,0,6,0,6,0,-2,-1,-12,-1,-6,-1,6,0,11,0,10,0,4,0,-6,-1,-8,-1,-3,-1,-7,-1,-15,-1,-11,-1,0,0,7,0,17,0,19,0,0,0,-20,-1,-17,-1,-6,-1,1,0,25,0,44,0,24,0,-12,-1,-31,-1,-41,-1,-39,-1,-9,-1,21,0,17,0,3,0,-2,-1,-4,-1,8,0,26,0,6,0,-37,-1,-49,-1,-26,-1,18,0,76,0,102,0,67,0,0,0,-59,-1,-78,-1,-49,-1,-4,-1,18,0,29,0,37,0,43,0,48,0,45,0,29,0,9,0,-14,-1,-35,-1,-27,-1,-12,-1,-31,-1,-45,-1,-20,-1,8,0,26,0,43,0,38,0,14,0,0,0,-11,-1,-18,-1,1,0,12,0,-16,-1,-48,-1,-55,-1,-62,-1,-64,-1,-16,-1,57,0,75,0,24,0,-17,-1,-18,-1,-12,-1,0,0,40,0,58,0,24,0,0,0,12,0,6,0,-46,-1,-96,-1,-100,-1,-50,-1,31,0,83,0,65,0,-3,-1,-73,-1,-83,-1,0,0,127,0,-62,0,-110,0,40,0,-37,-1,-76,-1,-72,-1,13,0,123,0,117,0,23,0,-12,-1,6,0,10,0,47,0,121,0,110,0,0,0,-68,-1,-27,-1,36,0,31,0,-21,-1,-67,-1,-102,-1,-66,-1,102,0,6,1,-11,0,126,0,8,0,-112,-1,124,-1,-11,-1,18,0,-117,-1,37,-1,-4,-2,-11,-2,-81,-1,-42,0,39,1,-105,0,-29,-1,46,-1,-25,-2,-97,-1,-74,0,46,1,-14,0,67,0,64,-1,97,-2,88,-2,10,-1,-66,-1,82,0,14,1,93,1,-70,0,-18,-1,-128,-1,9,-1,-43,-2,119,-1,58,0,85,0,24,0,-6,-1,4,0,43,0,100,0,-73,0,-22,0,-110,0,-2,-1,-76,-1,103,-1,15,-1,81,-1,-43,-1,-49,-1,-70,-1,18,0,52,0,-43,-1,-97,-1,-47,-1,-20,-1,21,0,-30,0,90,1,31,0,-126,-2,97,-2,-4,-2,-109,-1,-50,0,-63,1,-35,0,9,-1,17,-2,-126,-2,-89,-1,109,0,8,1,-49,1,-97,1,-19,0,94,1,71,1,84,-1,54,-2,123,-2,-30,-3,111,-3,123,-2,25,-1,-65,-2,5,-1,16,0,-69,0,-20,-1,89,-2,67,-2,-25,-2,66,-2,-119,-2,-2,0,-39,1,17,0,7,-1,96,-1,-97,-1,83,0,50,2,-117,3,10,2,-110,-2,10,-3,52,-2,39,-1,-40,-1,-99,1,49,2,101,0,101,-1,92,0,-85,0,70,-1,-14,-3,-57,-3,45,-2,-32,-2,58,0,120,1,69,1,20,0,-67,-1,49,1,-19,2,21,2,60,-1,33,-2,-52,-2,118,-2,-128,-2,1,1,62,3,-48,2,113,1,-37,0,-54,0,90,0,74,-1,-87,-2,19,-1,30,-1,-125,-2,-95,-1,-67,2,59,4,-128,2,-72,0,-53,0,82,0,-122,-2,127,-2,124,0,87,0,-95,-3,6,-3,-53,-1,104,2,73,3,29,3,4,2,23,1,55,1,61,1,43,1,21,1,-73,-2,10,-4,120,-2,123,3,92,5,-65,5,53,5,-34,-1,95,-7,17,-7,-2,-3,87,3,-127,6,73,6,-101,3,70,-1,-120,-6,-58,-6,14,0,-75,1,31,-1,6,-1,-54,-2,-23,-6,106,-6,1,0,6,4,24,3,69,1,-38,0,-92,-1,58,-4,-125,-6,92,-4,-102,-4,-52,-5,-57,-1,40,3,88,0,-106,-2,-52,-2,52,-5,73,-6,99,0,80,4,-2,2,-56,0,-19,-3,66,-4,4,-2,0,0,62,1,-43,1,34,-2,-58,-8,119,-7,-7,-2,89,3,-15,5,30,7,-89,5,108,2,25,0,-85,0,98,2,-82,0,10,-3,55,-3,-113,-2,8,-4,-45,-6,98,-2,-97,-1,-51,-3,-94,0,60,6,30,8,-89,7,125,3,-8,-7,-33,-11,-121,-5,122,0,18,3,121,5,61,1,-69,-7,-108,-8,17,-4,70,1,70,5,74,2,-36,-4,53,-7,-5,-13,32,-12,83,-4,22,-1,74,-3,71,1,111,3,-15,-2,-3,-5,-40,-8,14,-11,-37,-4,-29,10,38,12,-104,5,-51,1,88,-7,62,-13,74,-3,-86,6,110,4,-7,3,66,1,-57,-7,83,-2,25,6,-19,3,16,8,-92,13,113,0,46,-14,84,-12,27,-6,36,0,-72,9,54,12,-32,5,5,0,93,-5,118,-7,-107,-2,-108,1,-118,-4,0,-5,59,-1,-59,1,98,6,24,10,96,5,76,2,40,3,-57,4,-128,21,-88,39,-43,26,-69,4,99,3,10,2,-117,-14,-51,-29,115,-32,98,-21,-126,-12,61,-24}; }
	private static byte[] data1(){ return new byte[] {-99,-35,115,-18,-107,2,-96,7,64,16,107,18,-45,-17,14,-54,41,-46,94,-19,-123,0,32,33,44,56,127,28,89,-14,-38,-26,103,-16,61,2,-28,23,123,32,124,15,-66,-7,-54,9,-79,46,-4,39,-22,5,66,-6,39,-20,105,-29,34,27,49,100,-119,99,76,49,123,24,-27,42,27,65,-2,47,-1,12,18,-2,1,-31,-14,-73,-16,-32,-46,72,49,105,125,70,111,48,-94,4,-22,-56,-58,-37,-19,26,103,47,8,50,57,40,-107,-3,-97,-16,26,14,55,29,-38,49,47,74,47,30,-63,-40,-18,-42,47,-18,-39,-13,100,33,-20,94,105,77,-74,26,100,32,-102,32,109,-29,-127,-74,-27,-63,71,-40,-83,-29,43,-31,111,-40,-114,-36,22,-34,-121,-38,62,-17,-26,5,-27,-1,16,-13,-19,-25,38,-32,-19,-19,-62,-7,10,-21,-28,-34,-52,-32,-39,-36,60,-40,124,-37,-31,-39,-111,-45,-44,-39,-12,-24,44,-25,123,-46,-40,-59,111,-54,-78,-48,47,-46,-43,-44,-107,-42,124,-45,28,-43,-15,-38,-118,-41,-13,-31,-62,20,106,68,-126,65,-2,35,-120,18,-54,19,46,25,119,21,-24,21,-28,32,-32,32,-22,24,47,23,76,19,38,23,-111,40,-106,40,28,21,47,9,93,5,116,9,57,29,23,46,30,38,-115,15,-109,1,10,-2,-61,-4,-116,-1,59,-7,102,-31,111,-37,-58,-16,-110,-1,-28,13,-91,30,-55,13,-14,-19,-58,-31,124,-50,115,-73,12,-58,123,-25,-36,-10,-7,-8,102,-11,58,-19,33,-24,19,-26,-15,-31,-36,-36,45,-37,39,-34,-29,-31,-48,-28,93,-23,47,-23,-6,-40,-87,-61,46,-60,125,-42,-92,-32,-1,-27,-66,-19,82,-23,95,-30,89,-22,18,-15,112,-15,0,-10,51,-14,110,-28,106,-33,115,-30,-58,-27,66,-24,16,-27,25,-34,-15,-39,47,-39,-127,-39,12,-41,-127,-43,30,-38,-91,-36,24,-37,-2,-38,68,-40,-90,-41,-73,-34,-38,-31,64,-32,87,-35,-49,-47,21,-53,-106,-42,-102,-30,-111,-25,-21,-17,70,-6,43,0,17,-4,-54,-14,-124,-8,78,10,109,16,-63,12,-6,11,112,9,23,2,9,-3,108,-3,89,-2,-9,-3,89,2,-78,5,-39,-7,62,-21,37,-18,49,-11,120,-14,-67,-7,-32,17,-76,28,-3,15,77,4,56,-2,-29,-13,-117,-14,47,-4,-2,-4,-14,-6,-73,1,44,-1,100,-17,-36,-23,-76,-17,30,-17,51,-20,112,-13,22,-6,59,-12,-15,-18,119,-13,88,-10,117,-13,-127,-15,-53,-15,6,-13,-30,-15,108,-18,-32,-17,-79,-14,27,-14,-117,-9,-29,-6,1,-20,56,-31,-19,-18,63,-3,-1,-3,68,-1,-73,-2,59,-10,103,-12,-46,-5,16,0,-103,5,-91,15,94,16,53,10,-72,10,-74,10,43,7,122,13,-53,21,49,16,-21,8,63,11,25,13,39,12,69,13,39,12,-11,9,-20,11,-68,10,85,4,-3,5,-58,14,-3,14,3,11,34,18,-22,27,-88,25,44,19,14,16,-13,7,-75,-3,121,-1,-22,7,9,9,118,7,6,10,-7,10,102,10,-84,13,-45,15,64,12,39,6,19,-1,72,-5,18,0,-10,5,-60,5,93,4,108,2,-40,-1,-77,4,98,11,78,7,72,3,6,9,75,10,-60,3,24,0,12,-5,112,-10,-16,0,108,14,108,11,71,7,-31,12,-63,8,-25,-8,-59,-16,-95,-16,57,-16,-17,-15,84,-12,1,-11,42,-9,20,-9,-116,-13,-90,-10,-59,-3,75,-5,-104,-15,-127,-23,45,-28,123,-27,-77,-20,13,-17,18,-18,103,-14,74,-12,-43,-19,-59,-22,-111,-17,-4,-14,123,-15,31,-19,-6,-24,-27,-21,-51,-11,107,-5,-80,-9,65,-15,-32,-19,-32,-20,-21,-22,-93,-25,20,-26,13,-27,57,-30,-99,-28,-41,-16,-78,-4,-68,0,2,2,-10,1,-108,-3,28,-8,-33,-12,48,-12,1,-7,-120,0,-122,0,75,-7,-19,-12,112,-12,92,-13,-24,-12,47,-5,-7,-2,-56,-4,-18,-5,-97,0,8,5,52,5,-118,3,39,1,-75,0,-34,7,63,17,18,17,-53,11,-11,10,120,7,70,-3,52,-7,-103,-2,45,3,-26,5,-26,7,68,3,101,-4,-23,-5,33,-5,2,-10,-36,-10,52,-2,39,2,-35,3,-116,7,127,9,16,9,74,8,101,5,-95,2,-111,3,-22,3,69,2,69,4,-2,7,109,7,47,5,11,5,81,6,89,9,-12,11,-25,9,-103,6,108,7,-58,10,-103,14,30,18,116,18,-30,16,41,17,103,16,-113,12,9,10,9,9,-121,7,-111,8,-21,9,-29,5,70,2,76,4,-94,5,-13,6,52,14,-47,19,29,18,30,17,-7,16,115,12,55,11,65,16,85,17,15,15,50,15,119,10,-98,0,115,-3,33,-1,-76,-1,-50,5,-98,15,71,18,32,17,99,17,-67,13,-111,8,113,9,-71,12,107,14,8,17,119,18,3,16,81,13,-44,11,-3,9,-23,8,126,8,-122,7,-100,6,-109,4,-10,1,-97,2,-64,4}; }
	private static byte[] data2(){ return new byte[] {-116,5,-53,7,83,9,24,6,-19,2,-62,1,21,-1,61,-1,-10,3,-51,3,55,-2,-5,-5,-121,-6,56,-10,-100,-9,-59,-2,-52,1,-93,3,-93,7,-24,4,92,-3,-67,-7,117,-11,-125,-15,66,-9,7,-1,67,-1,-13,-2,3,0,102,-3,-23,-5,89,-2,-92,-2,-111,-4,-44,-6,-57,-10,-124,-14,-46,-13,13,-9,-128,-10,-124,-11,-20,-9,-112,-5,126,-3,-59,-4,-118,-6,-17,-9,104,-12,2,-14,106,-12,68,-7,-83,-5,-106,-4,121,-2,-111,0,-87,3,-38,7,-105,7,58,3,9,3,-37,4,-124,2,-5,1,85,5,78,6,87,7,3,10,13,9,125,7,-66,7,-71,4,-24,2,-55,7,-116,10,23,8,35,10,-82,15,-72,15,-71,14,-21,18,-90,20,-119,16,-87,13,-8,11,74,9,46,9,99,9,87,7,-102,8,58,13,-60,15,-11,15,112,14,56,13,96,16,-14,19,29,19,49,18,-39,16,15,10,-92,4,110,7,32,12,102,14,1,14,-70,8,53,5,25,9,22,11,-13,8,23,10,-62,9,56,5,37,5,125,8,-108,9,-58,10,-38,9,-40,2,-4,-4,84,-3,2,-4,-61,-11,-11,-13,-63,-8,127,-4,52,0,63,5,-81,3,-11,-3,-61,-3,2,0,42,0,61,-1,-18,-6,-107,-11,-47,-12,-125,-12,11,-14,-69,-13,-110,-6,-98,1,-91,6,35,8,-44,6,47,7,30,9,68,9,-54,8,37,9,-41,9,41,11,-110,10,1,7,115,5,68,6,-116,5,-106,4,45,5,-47,6,29,8,-59,6,94,6,-48,9,61,10,-42,6,15,6,3,7,27,10,73,16,59,17,-64,12,-98,11,-1,10,-81,6,-43,3,93,3,75,2,60,1,-6,-1,102,-2,39,-2,-107,-3,-72,-5,-87,-5,-24,-5,-72,-7,15,-6,61,-3,90,-4,99,-6,-93,-5,-122,-7,-112,-12,100,-12,-23,-11,-38,-11,89,-8,-73,-6,109,-8,-106,-10,31,-9,-106,-12,-51,-14,13,-7,-78,-1,-30,-2,83,-4,-7,-7,-79,-11,92,-12,-122,-11,-107,-12,-30,-12,103,-10,-97,-11,67,-10,-32,-8,-63,-7,89,-6,23,-6,-54,-9,51,-7,52,-1,-128,2,-115,2,19,5,-78,8,-59,7,47,4,-4,2,47,3,50,3,85,4,64,5,-93,4,-39,4,-81,5,-93,3,-60,-1,-35,-2,-106,1,0,5,8,6,108,3,-73,2,-89,8,11,14,56,15,-6,18,-103,22,67,20,118,18,-32,18,-79,16,-65,17,8,25,67,27,-8,19,-94,13,-3,13,41,15,-31,13,-62,11,-95,8,-88,6,78,5,97,-3,-93,-12,127,-9,-55,-3,48,-3,-56,-4,-106,-2,-49,-4,-35,-7,-49,-8,-88,-8,68,-7,-18,-9,-39,-13,-35,-14,-89,-11,8,-10,115,-12,58,-10,64,-6,-95,-5,87,-7,3,-9,-126,-8,-17,-6,120,-8,9,-12,22,-12,99,-10,76,-11,-49,-15,36,-15,-118,-13,-90,-12,-106,-12,-74,-12,97,-13,-36,-13,127,-9,28,-8,-53,-8,2,0,-20,6,28,8,-29,6,46,6,-97,8,-108,9,-40,1,16,-6,-64,-7,-67,-8,-98,-11,-34,-11,-84,-10,56,-9,-21,-7,47,-5,0,-5,-75,-2,14,4,-2,4,-51,2,25,2,-99,3,23,5,93,4,-34,1,-114,0,-117,1,-95,2,38,1,-3,-4,-29,-7,-51,-7,82,-8,116,-14,-68,-21,-43,-24,-112,-22,99,-20,55,-21,-83,-21,-39,-17,-94,-14,61,-13,94,-11,56,-8,125,-9,-20,-14,65,-16,64,-15,-106,-16,-68,-19,108,-20,-30,-20,-9,-18,-33,-16,39,-15,18,-11,52,-4,117,-3,-59,-7,50,-7,-116,-5,-21,-5,-5,-8,77,-10,-81,-10,73,-9,-64,-10,95,-9,99,-8,92,-7,-49,-5,-46,-3,74,-2,110,-1,18,1,-85,2,-71,5,102,8,53,8,-74,8,83,12,109,14,72,13,88,13,72,16,-14,19,-11,21,-20,20,55,19,-43,19,-15,20,-72,19,51,17,96,16,-16,16,-35,14,5,10,21,7,-62,7,-48,9,70,10,-35,8,-115,9,105,13,22,17,77,19,-43,19,-72,19,47,20,16,17,-9,10,-94,9,111,10,-79,7,97,6,25,8,101,9,-96,11,47,13,-43,11,-66,12,-46,15,-13,13,39,9,-123,7,80,5,-71,-1,-34,-3,105,1,-5,2,-125,2,-8,4,50,8,-73,8,-76,7,95,7,-17,8,-86,10,-101,9,19,7,39,6,-40,6,-93,7,125,7,104,6,14,6,-11,6,122,6,-119,4,24,5,-31,6,-86,5,-69,4,-117,6,98,6,28,4,122,3,15,3,-63,1,-26,1,-94,3,63,4,-107,2,10,1,-11,0,92,1,76,3,19,5,125,2,-39,-2,82,-3,90,-6,-36,-10,64,-11,-107,-13,34,-13,5,-13,-24,-18,57,-20,68,-16,29,-12,-26,-13,-96,-14,-19,-17,61,-18,81,-14,11,-9,32,-9,-46,-9,-43,-6,14,-5,38,-7,-91,-9,-80,-11,-108,-13,-64,-17,-30,-23,62,-24,-12,-22,-7,-22,114,-23}; }
	private static byte[] data3(){ return new byte[] {43,-21,80,-17,-72,-13,29,-10,-91,-11,97,-11,85,-10,-71,-10,90,-9,-5,-8,77,-7,68,-9,-85,-11,-95,-10,-114,-8,-27,-7,-5,-6,101,-4,-58,-2,101,1,-84,2,105,2,88,1,-85,2,-87,8,37,13,-72,11,-61,10,-34,12,41,12,74,7,-69,2,-112,1,55,2,-88,1,24,2,61,6,117,10,99,12,-15,13,31,15,-7,14,-51,12,123,8,31,6,-53,7,-80,7,83,4,36,4,-24,6,124,7,-6,7,-119,10,-16,10,-74,7,-85,3,67,0,112,-4,-60,-10,-42,-14,-78,-12,42,-9,118,-10,-60,-10,-68,-9,10,-8,-17,-6,-114,-3,-4,-5,100,-7,122,-9,34,-9,-65,-7,91,-5,-75,-6,-124,-5,-99,-4,78,-4,23,-4,110,-5,15,-5,59,-4,-2,-5,10,-6,-119,-7,5,-6,86,-5,-114,-2,-99,-1,111,-4,121,-6,35,-5,-126,-6,100,-7,124,-7,-74,-7,-43,-6,46,-4,123,-4,-38,-2,57,2,-57,1,42,0,-12,-1,72,-2,-38,-4,-10,-3,-100,-2,-69,-2,-78,-1,19,-1,-41,-3,-34,-1,-47,2,-19,2,-70,2,60,4,100,4,-97,2,-1,1,89,2,-100,1,-24,0,-68,1,6,2,-74,0,-59,0,-49,1,23,0,26,-2,-40,-2,28,-1,-13,-2,122,0,-35,1,18,4,-7,6,-117,6,-116,6,-43,9,30,9,-101,4,13,3,125,2,-20,0,-13,-1,-100,-3,97,-5,-73,-4,-75,-3,-121,-4,-108,-2,41,4,-65,7,48,8,-112,8,45,10,-72,11,-122,11,8,9,121,5,98,3,114,3,-77,2,0,0,-3,-2,-114,0,96,1,127,1,91,2,-63,2,9,3,-61,3,-119,3,20,3,2,3,8,2,48,1,95,1,107,1,113,1,-103,1,38,2,-27,3,-58,4,-92,3,47,3,-8,3,115,4,17,4,6,3,-30,3,67,7,-70,7,-93,3,-111,0,-8,-1,82,-2,-70,-4,60,-2,-34,-1,-30,-2,-85,-2,-99,-1,34,-2,-81,-4,84,-2,127,-1,-74,-2,47,-1,-107,1,-118,3,53,3,69,2,-101,3,-38,4,98,3,0,2,115,1,106,0,100,0,30,-1,34,-6,25,-9,89,-9,-124,-11,-14,-13,107,-11,-86,-11,-62,-11,10,-8,-79,-8,-103,-8,-94,-7,82,-8,-28,-10,63,-8,80,-8,57,-9,118,-10,36,-12,-47,-13,6,-10,90,-11,108,-11,104,-7,65,-5,12,-5,-63,-5,35,-5,108,-5,118,-2,-83,-1,74,-1,-106,0,-65,1,57,1,119,0,41,1,47,3,-38,3,-33,3,-19,6,-40,10,-83,11,-77,10,-36,9,80,10,-73,12,44,14,-84,12,-126,10,88,9,5,9,-72,8,-60,7,-96,7,94,8,-85,7,122,6,-43,5,69,4,82,3,-123,3,-62,2,79,3,-65,4,13,2,-120,-2,106,-2,73,-3,-71,-6,109,-6,-55,-6,99,-6,-8,-8,5,-10,17,-10,41,-5,60,-1,-72,-1,-63,-1,103,0,15,1,102,1,41,1,84,0,10,-1,-84,-2,-7,-1,15,1,89,1,2,2,-6,2,34,4,-92,4,-44,2,18,0,-126,-2,66,-3,-7,-6,39,-8,115,-9,85,-6,-74,-4,-23,-5,27,-4,-19,-2,14,1,3,2,-51,2,0,3,76,2,86,0,-82,-2,-31,-2,56,-2,-3,-4,56,-1,126,1,-45,-1,-47,-2,4,0,5,0,95,-1,56,-2,-93,-5,-109,-6,125,-5,9,-5,-120,-7,94,-7,-118,-6,54,-5,-91,-6,-13,-6,71,-4,-43,-5,-21,-6,-89,-5,-16,-5,14,-4,-85,-3,-107,-2,-9,-3,116,-3,-21,-3,68,0,59,2,-118,0,18,-2,79,-3,-37,-4,103,-2,-93,1,32,2,36,1,63,1,-31,0,-94,1,-92,3,-87,2,67,1,47,2,-30,-1,-123,-5,12,-4,90,-2,8,-2,67,-3,-56,-5,44,-6,-30,-5,-17,-3,11,-2,-106,0,-124,3,-52,1,-89,-1,-11,-1,9,0,-34,1,93,5,-31,4,113,2,-72,2,4,3,31,3,-39,4,-8,3,-52,0,-71,0,36,1,69,-1,-56,-2,-78,-2,4,-3,20,-3,-51,-4,-52,-8,105,-9,-10,-6,36,-4,-29,-6,-54,-5,-89,-5,95,-7,20,-6,64,-4,-76,-5,10,-4,126,-2,-54,-3,-125,-6,-24,-8,5,-8,-54,-9,-59,-7,-86,-6,39,-7,-63,-8,30,-7,96,-7,-72,-4,-99,1,2,3,99,2,-74,3,-127,5,92,4,60,1,52,0,88,1,-24,0,111,-1,0,0,-118,1,-102,2,-111,3,105,3,-8,2,-92,4,84,6,-59,5,108,5,-36,5,-7,4,83,4,-3,5,-97,7,-107,7,-38,7,-123,8,40,7,-87,4,-123,4,82,6,-24,5,-21,1,20,-2,100,-3,113,-3,-22,-5,39,-4,111,0,-127,4,46,5,32,5,69,6,59,6,-10,3,51,2,-107,1,-23,-1,90,-2,-105,-2,21,-2,-54,-4,26,-3,113,-4,-77,-6,64,-3,39,2,101,3,-121,2,-50,1,9,0,-84,-2,-5,-2,-3,-1,-69,1,37,3}; }
	private static byte[] data4(){ return new byte[] {-48,2,51,2,64,2,93,2,-32,1,-91,0,114,1,-18,4,-22,5,87,4,-38,4,-79,5,-40,5,-54,7,22,8,60,6,-76,7,-62,8,27,5,104,3,-5,4,101,4,-49,2,-97,0,8,-4,101,-6,-85,-3,59,-1,-55,-2,-12,0,-127,3,18,3,21,2,-114,2,78,2,115,0,-40,-1,44,1,-33,1,78,2,120,3,81,2,-37,-2,-97,-3,-20,-3,-51,-4,-2,-4,-84,-2,-54,-4,-60,-7,-12,-6,81,-5,-53,-9,81,-8,-75,-3,-18,-1,-7,-2,-97,-3,18,-5,115,-5,34,0,2,2,90,1,85,3,73,4,62,2,124,1,-50,1,-88,2,76,5,8,5,-27,-1,-69,-4,-94,-3,-66,-3,-71,-4,-45,-3,-109,0,52,2,-117,2,67,3,-30,3,-47,2,-123,0,98,-2,120,-3,56,-2,-109,-1,81,0,45,0,-121,-1,112,-1,86,-1,-47,-3,-81,-4,4,-3,-55,-4,91,-4,10,-4,103,-6,116,-6,28,-3,2,-3,-125,-5,112,-3,-88,-2,-78,-4,-65,-5,-69,-5,-50,-5,-104,-3,-97,-3,18,-6,119,-8,-8,-7,-112,-6,53,-6,-17,-7,-32,-8,-17,-9,-111,-9,62,-10,77,-11,121,-9,-14,-6,-78,-4,-93,-3,-101,-2,75,-2,127,-3,-59,-3,23,-2,-70,-3,30,-3,114,-4,-98,-4,52,-3,57,-4,-111,-5,-116,-2,44,3,-48,5,-108,6,8,7,-74,7,-79,8,-114,9,21,9,83,7,-67,6,-113,7,-49,6,-58,4,-84,3,6,3,-89,3,64,6,-79,6,113,3,67,0,80,-1,55,0,-49,-1,-62,-5,72,-6,-65,-2,95,1,-62,0,20,2,9,2,34,-1,-98,-2,120,-1,99,-1,-56,-1,81,-2,37,-5,-117,-6,8,-5,37,-5,68,-4,80,-5,43,-8,-120,-9,126,-8,-5,-8,-81,-7,36,-7,82,-8,62,-7,-37,-8,17,-8,93,-5,-23,-2,-57,-3,-55,-6,-31,-8,42,-9,83,-12,-47,-15,66,-13,-21,-10,-82,-9,83,-9,76,-7,-94,-5,25,-3,-113,-2,76,0,-126,1,-47,-2,-12,-7,-30,-6,-17,-2,127,-2,86,-1,111,5,-101,8,99,7,125,6,103,5,80,5,41,7,-118,6,67,4,63,4,52,4,25,3,29,3,118,3,-75,3,58,4,-75,4,32,7,-118,10,-70,10,-66,9,-87,9,109,6,-124,1,-26,-1,-87,-1,104,-1,58,0,73,-1,109,-3,-128,-1,-77,2,-72,2,-57,2,-97,4,54,5,-86,4,-51,4,12,4,-93,2,57,5,110,10,23,10,30,5,101,3,-2,2,-27,-1,-77,-2,29,0,45,0,91,0,121,0,-12,-2,0,0,-113,2,87,1,75,0,67,1,-21,-2,108,-4,-50,-3,-101,-3,-73,-5,-65,-4,-107,-3,94,-4,-83,-4,-35,-3,117,-3,91,-4,-82,-5,-95,-5,-87,-5,-23,-6,-48,-7,-6,-8,-18,-8,8,-6,-39,-6,23,-5,49,-4,38,-3,60,-3,49,-3,-18,-5,-20,-6,-95,-4,123,-4,47,-8,-28,-11,100,-10,-103,-12,125,-15,-115,-16,-19,-15,-88,-12,-102,-10,-97,-10,-16,-10,-95,-8,45,-6,-70,-6,-57,-6,-92,-5,-116,-3,101,-2,84,-3,96,-4,-59,-4,43,-3,-116,-4,-115,-4,27,-2,86,-1,-40,-1,-39,-1,-85,-3,-60,-5,-111,-3,10,-1,42,-2,27,-1,21,1,-26,1,62,3,-67,3,92,3,117,5,101,6,14,3,-10,0,-40,1,-64,2,7,4,-13,4,63,4,74,3,-77,2,-3,3,-126,7,-108,8,89,6,67,4,-97,2,0,3,127,5,-107,4,-64,1,-91,2,-98,3,71,2,7,3,42,5,33,5,120,3,121,2,96,3,112,3,-23,0,-18,-1,96,0,-104,-1,-44,1,103,6,-14,6,-24,5,-88,5,-26,3,-69,3,-40,4,63,3,7,3,96,4,-12,2,-59,4,-104,10,103,10,-18,5,35,4,48,3,96,3,125,5,56,5,-56,3,125,4,-25,4,-64,4,-79,5,-88,5,21,4,-94,3,38,5,-126,6,-63,5,59,4,24,4,21,5,35,6,46,5,-118,1,81,-1,6,-1,-107,-4,-120,-6,86,-4,0,-2,-71,-3,-95,-3,103,-3,-15,-4,-122,-4,-14,-5,-110,-4,117,-3,7,-3,56,-3,117,-3,88,-4,-9,-5,62,-5,37,-6,13,-3,-116,0,-89,-1,-96,-2,103,-2,-101,-4,87,-4,92,-4,-1,-7,93,-7,37,-7,126,-10,21,-9,66,-6,112,-6,-88,-6,30,-5,-63,-8,61,-8,26,-6,71,-6,-68,-5,62,-3,-68,-7,-81,-10,108,-9,-40,-10,74,-10,-89,-9,-12,-10,68,-10,110,-8,20,-7,-40,-8,97,-4,91,0,-107,0,35,-1,1,-2,100,-3,-26,-3,4,-1,7,0,-13,0,-46,0,80,-1,-84,-2,34,0,-43,1,92,2,32,2,-122,1,-106,1,71,3,-57,4,-82,4,40,5,-59,6,-58,6,52,5,-116,4,101,4,122,3,-106,3,90,6,-3,9,-66,11,56,11,-119,10,-79,11,-30,13,-104,14,125,13,-101,12,-123,12}; }
	private static byte[] data5(){ return new byte[] {-69,11,42,10,-60,9,-21,10,93,12,-82,14,-27,17,102,18,5,15,-64,11,-61,10,51,11,-116,11,105,8,125,2,51,0,-62,0,12,-2,-45,-6,73,-5,-104,-5,-67,-7,-70,-9,-69,-11,34,-11,-43,-10,-90,-9,-118,-10,117,-11,15,-11,39,-10,-29,-9,-121,-9,-110,-10,-21,-10,-21,-11,-72,-13,-71,-13,119,-11,62,-9,-19,-8,-126,-7,58,-7,-80,-7,10,-6,81,-7,45,-7,126,-6,-77,-5,98,-5,31,-6,-32,-7,-17,-5,98,-1,-66,1,-82,1,-28,0,122,1,11,3,122,4,50,5,-86,4,4,4,-120,4,-121,4,-10,2,-60,1,-89,1,-58,1,32,2,101,2,-87,2,-113,3,-104,3,65,2,49,2,25,3,-125,2,-48,1,-1,1,59,1,67,0,98,0,89,0,43,0,69,0,-70,-1,-17,-2,-85,-3,45,-5,21,-6,-4,-6,-113,-6,-113,-7,17,-6,17,-6,10,-7,5,-8,-65,-10,76,-9,51,-6,-59,-5,73,-4,-68,-3,-17,-3,-51,-4,109,-4,-6,-5,95,-5,-47,-6,-29,-8,-102,-9,109,-7,25,-4,-116,-3,-84,-3,86,-3,-92,-2,54,0,-89,-1,-74,-1,-54,0,-24,-1,126,-1,-54,0,75,0,97,-1,29,-1,40,-4,0,-6,19,-3,19,0,73,0,121,1,-109,2,-57,1,14,2,115,3,2,4,-102,5,88,8,-17,8,-30,7,1,8,-45,8,-94,9,21,11,-30,11,89,11,-73,10,75,9,96,7,-53,7,17,9,-120,8,-98,8,-65,9,25,9,24,8,-124,8,51,9,71,10,-113,10,-111,7,-96,3,19,2,110,2,-24,2,-72,1,127,-1,-69,-1,71,2,-19,3,79,4,101,4,-101,4,-81,4,69,3,-7,1,27,3,-50,2,-61,-2,8,-4,102,-4,124,-4,-112,-4,36,-2,34,-1,41,-2,26,-3,-19,-4,-52,-5,-3,-7,-48,-6,-114,-3,-28,-2,-53,-1,-39,0,-96,-1,14,-3,127,-5,-95,-6,40,-6,-13,-8,-124,-10,-88,-10,0,-6,-48,-5,38,-4,-69,-3,-108,-2,-104,-3,10,-3,-107,-3,0,-1,10,1,-105,1,118,-1,-21,-4,121,-4,77,-3,-113,-4,13,-6,-57,-8,-65,-7,125,-6,88,-6,-43,-5,-91,-2,-64,-2,-38,-5,-49,-7,-31,-7,26,-5,-65,-4,17,-3,-8,-5,42,-5,-46,-7,100,-8,-2,-7,-41,-4,97,-3,-67,-4,45,-5,118,-8,84,-8,-56,-6,68,-5,-96,-6,14,-4,44,-2,-101,-1,-33,0,105,1,-27,1,23,4,52,6,-71,5,29,4,-128,2,47,0,15,0,-22,3,108,6,59,5,-105,4,91,4,-111,2,-116,2,-79,4,-105,5,9,6,-63,6,-5,5,-26,4,-59,4,-111,4,-105,4,-105,4,19,3,-28,0,-90,-1,101,-1,20,-1,-52,-3,38,-3,-81,-2,-123,0,-91,1,45,2,111,0,-7,-3,103,-2,3,0,106,0,107,0,95,-1,107,-3,25,-3,0,-2,101,-2,122,-2,47,-2,-78,-3,-51,-3,87,-2,93,-1,-83,-1,49,-3,112,-6,-63,-6,95,-5,-10,-7,-68,-7,103,-4,-11,-2,26,-1,39,-2,-22,-3,91,-2,97,-1,-81,0,-98,0,-108,-1,-95,-1,-99,-1,39,-2,43,-3,-108,-3,98,-2,-50,-2,0,-2,-39,-4,45,-3,5,-2,-74,-2,-126,0,100,2,-47,2,94,2,97,1,-25,0,107,2,70,4,-63,4,-115,4,58,4,9,5,119,7,66,8,76,6,-53,4,-29,4,37,6,58,8,4,8,13,5,21,4,-16,4,-17,2,-122,-1,-65,-2,-67,-1,-58,0,124,1,-73,0,13,-1,-69,-2,-82,-1,-39,0,26,2,-94,2,71,2,-3,1,64,1,43,0,109,0,-101,0,-106,-2,-51,-4,67,-3,48,-2,-90,-2,-63,-2,6,-2,90,-3,62,-3,-21,-4,91,-3,8,-1,-53,-1,15,-1,52,-2,-41,-3,96,-2,79,-1,2,-1,-39,-3,76,-3,-44,-4,-97,-5,104,-6,98,-6,-99,-5,-123,-4,-44,-4,-107,-2,64,1,-55,1,-116,0,-34,-1,55,-1,-101,-3,121,-4,38,-3,-122,-2,-16,-2,13,-1,34,0,-18,0,-127,0,91,0,-125,0,68,0,115,1,37,4,-102,5,-50,5,93,5,117,2,-89,-2,42,-2,55,0,98,1,104,1,112,1,-35,1,109,2,90,2,-32,1,-4,1,-107,2,96,3,-4,3,-61,3,-27,3,-60,4,89,3,-42,-1,-75,-2,6,0,-54,0,-16,1,74,4,6,5,-126,3,-56,2,122,3,111,2,-8,-2,0,-3,43,-2,86,-1,-103,-1,40,1,70,3,-117,3,114,2,-87,1,-108,1,-51,1,33,2,-79,2,20,3,-29,2,24,3,9,4,20,4,-25,2,47,2,79,2,106,2,-84,2,-105,3,-127,4,-86,4,-62,4,-103,5,-120,6,-54,6,-111,6,118,6,-56,7,-50,10,64,12,-109,9,-41,5,-110,4,34,4,82,2,-43,0,126,1,24,3,-124,3,1,2,104,0,-42,1,41,5,105,6,97,7,57,11}; }
	private static byte[] data6(){ return new byte[] {-35,12,9,8,108,2,-57,0,113,0,52,-1,106,-3,97,-5,83,-6,-60,-6,2,-5,2,-6,74,-8,-25,-10,-25,-10,-90,-9,-115,-9,-62,-10,69,-10,108,-10,13,-9,-21,-10,61,-11,11,-12,78,-11,87,-9,-24,-9,-14,-9,-123,-8,44,-8,-21,-10,49,-9,-69,-8,-28,-7,-59,-5,28,-2,21,-2,90,-4,-73,-5,-41,-5,-67,-5,9,-4,-65,-4,41,-3,39,-3,-119,-3,56,-1,42,1,127,1,-81,0,118,0,77,1,28,2,-120,1,45,0,-66,-1,-63,-1,121,-1,-13,-1,-75,0,110,0,5,0,-39,-1,-82,-1,120,1,-51,4,-55,5,-79,4,106,4,-101,3,116,1,51,1,13,3,-14,3,3,4,88,4,-44,3,-10,2,77,3,-71,3,87,3,-80,3,-9,4,118,5,-36,4,-126,4,29,5,-97,5,-76,4,41,3,-46,2,84,3,-17,2,-12,1,44,2,70,3,121,3,-71,2,98,1,-1,-2,98,-3,-75,-2,-83,0,40,1,69,2,114,4,-47,4,22,3,-62,1,-37,1,19,2,41,1,27,0,26,0,78,0,-53,0,-103,2,-39,3,-110,2,-102,0,39,0,-62,0,-93,0,-22,-2,51,-3,-4,-4,9,-3,69,-3,-118,-1,85,2,-109,2,78,1,12,1,-114,1,-67,1,-67,1,-64,1,112,1,-47,0,18,0,63,-1,-7,-2,-53,-1,-57,0,73,1,1,2,-63,2,-80,2,0,2,50,1,-7,0,-16,1,-74,2,-61,1,85,0,-87,-1,-29,-2,-31,-3,120,-3,77,-3,26,-3,32,-3,22,-4,-66,-7,90,-7,3,-4,92,-2,82,-1,3,0,-54,-2,121,-5,-89,-7,-30,-7,-89,-7,-104,-8,-110,-9,92,-9,-121,-8,-95,-7,126,-7,94,-7,-11,-7,30,-5,-14,-4,116,-2,57,-1,40,0,-41,0,-26,0,43,1,-126,1,48,2,-63,3,54,4,-30,2,115,2,32,3,101,3,108,4,49,6,77,6,117,5,-42,5,7,6,115,4,91,3,65,4,63,5,-9,5,-15,7,-110,9,-111,8,-82,6,63,6,56,7,-118,8,-123,8,-62,6,94,5,54,5,14,5,-52,4,-50,4,-120,4,-19,3,-21,3,-16,4,126,5,-5,3,-59,1,-82,0,60,0,64,0,121,0,116,-1,11,-2,-19,-3,27,-2,72,-2,-37,-2,85,-2,-10,-4,39,-4,-33,-6,-119,-7,-43,-7,29,-6,121,-7,81,-7,-74,-8,110,-9,-24,-9,-105,-7,51,-6,105,-6,-14,-6,-85,-6,-115,-7,-68,-8,114,-8,92,-8,-40,-8,-47,-7,-3,-7,-123,-7,-47,-7,24,-6,-70,-7,95,-6,-75,-5,-44,-5,-127,-5,-5,-5,-101,-4,-106,-4,-76,-5,-18,-6,68,-5,41,-5,-19,-7,36,-6,66,-4,-91,-3,-104,-3,73,-3,108,-3,15,-2,-111,-2,-114,-2,61,-2,82,-3,117,-4,-108,-3,25,0,60,1,-2,0,-98,1,-55,2,-121,2,-68,1,37,2,-117,2,50,2,-56,2,-6,3,2,4,57,3,-118,2,-12,2,-124,5,28,8,41,8,75,7,53,7,-7,6,127,6,50,6,-45,5,-87,5,113,5,126,4,113,3,18,3,103,3,-61,3,35,3,-57,2,100,4,-65,5,114,5,-12,5,-59,6,87,5,73,3,-122,2,27,2,-111,1,-122,0,-5,-2,32,-1,-19,0,118,1,-34,0,12,1,98,1,61,1,107,1,36,2,-74,2,61,2,-67,0,-125,-1,55,-1,77,-1,46,-1,96,-2,109,-3,-124,-3,-3,-3,-17,-3,-97,-2,-48,0,67,3,-66,4,-53,4,120,4,121,5,-91,6,-101,5,95,3,67,2,40,2,-31,1,90,1,106,1,46,2,-91,2,77,3,125,5,26,7,-104,5,102,3,60,3,69,3,-93,1,125,-1,19,-2,100,-3,-73,-4,87,-5,66,-6,17,-5,-63,-4,66,-3,52,-3,-63,-3,118,-3,121,-5,-58,-7,61,-7,-94,-8,71,-8,48,-7,85,-6,-50,-6,-28,-6,118,-6,72,-6,-112,-5,-63,-4,77,-4,-39,-5,-85,-5,-38,-7,-90,-9,-124,-9,77,-8,113,-8,-54,-8,-20,-7,1,-5,102,-5,-125,-5,-62,-5,27,-5,93,-7,24,-7,17,-5,-100,-4,-88,-4,66,-4,-5,-5,85,-4,3,-3,24,-3,-98,-3,35,-1,-42,-1,103,-1,-17,-2,-101,-2,18,-1,1,0,122,-1,63,-2,67,-2,-102,-2,-54,-2,-58,-1,-23,0,116,1,-109,1,104,1,9,2,-78,3,59,4,54,3,110,2,-99,2,-25,3,-109,5,92,5,107,3,106,2,-126,2,-95,2,-83,3,102,5,-77,5,-13,4,-99,4,126,3,108,1,51,1,-89,2,6,3,62,3,20,5,-48,6,33,7,-91,6,21,6,-86,6,-46,7,15,7,41,5,85,4,18,4,-127,4,-26,5,-61,5,-32,3,-59,2,103,2,-46,2,102,5,-43,7,74,7,-54,5,-116,5,117,5,-61,4,107,4,-84,4,-41,4,5,5,89,5,-95,4,-22,2,76,2,-61,2,109,2}; }
	private static byte[] data7(){ return new byte[] {-84,1,-26,1,-42,2,118,3,99,3,-112,3,-71,4,20,5,97,3,-58,1,-117,1,65,1,-60,0,79,1,64,2,18,2,115,1,-58,1,-72,1,-37,-1,61,-2,45,-2,-96,-3,106,-4,-98,-4,-76,-3,-64,-3,-49,-4,52,-4,-5,-4,-117,-2,59,-1,-50,-2,-1,-3,62,-3,104,-3,-120,-2,18,-1,-73,-2,-75,-2,81,-1,-18,-1,97,0,114,0,-101,-1,-90,-2,85,-1,-60,0,113,0,6,-1,56,-2,92,-3,2,-3,-115,-2,24,0,41,0,4,0,-122,-1,83,-2,-25,-3,81,-2,-105,-2,-5,-2,17,-1,102,-2,56,-2,-54,-2,-33,-2,-22,-2,37,0,116,1,-12,0,120,-1,10,-1,108,-1,-126,-1,78,-1,-85,-2,-56,-3,-33,-3,-106,-2,44,-2,-74,-4,-27,-5,108,-4,-30,-4,39,-4,93,-4,10,-1,-9,0,0,0,-114,-2,-13,-3,71,-3,-48,-4,-6,-4,36,-3,-14,-4,-65,-4,79,-3,-56,-2,30,0,-124,0,45,0,-41,-1,-3,-1,-13,-1,-86,-1,-4,-1,-118,-1,-32,-3,-101,-2,-32,1,15,3,54,2,89,2,120,2,-65,1,-39,1,-127,2,82,2,-94,1,54,1,121,1,79,2,-2,2,3,3,62,2,83,1,-51,1,-106,3,-97,4,100,4,-116,4,-25,5,54,7,38,7,58,6,-66,5,24,6,-23,6,57,7,120,6,18,6,-118,6,94,5,92,2,63,1,-53,2,-25,3,-67,3,-102,3,46,3,73,2,27,2,51,2,104,1,25,1,80,2,77,3,107,3,-114,3,-19,2,26,1,-107,-1,-3,-2,66,-1,16,0,63,-1,24,-4,31,-6,69,-5,-51,-4,-21,-4,50,-3,88,-2,-44,-2,101,-2,76,-2,-6,-3,-87,-4,61,-4,-105,-3,-99,-2,-23,-2,-89,-1,-118,-1,-85,-3,-104,-4,109,-3,-97,-3,-21,-4,76,-2,64,1,35,2,20,1,-115,0,107,0,48,0,67,0,5,0,-55,-1,-14,-1,111,-2,2,-4,-64,-4,-105,-1,-38,0,-99,1,110,2,19,1,38,-1,89,-1,11,0,32,0,-31,0,104,1,93,0,59,-1,-4,-2,-92,-2,27,-2,-17,-3,-22,-3,-11,-3,-4,-3,-55,-3,3,-2,-94,-2,111,-2,-16,-3,-51,-3,-121,-4,-3,-6,57,-4,-101,-2,-25,-2,-121,-2,-74,-2,-65,-3,85,-4,122,-4,22,-3,62,-3,114,-2,95,0,-80,0,-111,-1,-15,-2,-102,-2,-87,-3,5,-3,57,-3,-108,-3,-12,-3,-70,-3,19,-4,-51,-6,-64,-5,56,-3,126,-3,115,-3,-69,-3,-48,-3,-125,-3,3,-3,-120,-4,92,-4,-74,-4,90,-3,-79,-3,-46,-3,77,-2,114,-2,-108,-3,-34,-4,12,-3,121,-3,-24,-3,-59,-3,113,-4,-102,-5,108,-4,-67,-4,-55,-5,51,-4,-80,-2,-83,0,-99,0,-5,-1,43,1,-93,3,11,4,-35,1,15,0,121,-1,-16,-2,122,-2,80,-2,-101,-2,63,-1,-110,-2,73,-3,-51,-2,-105,1,-80,1,-127,0,-105,-1,-109,-3,-118,-4,-105,-2,-119,0,37,0,-54,-2,-49,-3,-119,-2,-57,0,26,2,60,2,-112,2,-71,2,-105,2,-94,2,69,2,-48,1,44,2,-119,2,16,2,102,1,48,1,-27,0,-72,-1,-115,-2,-39,-2,-48,-1,-2,-1,-119,-1,9,-1,42,-1,-4,-1,69,0,-2,-1,-83,-1,116,-2,89,-3,80,-2,-89,-1,-6,-1,-97,0,-46,0,126,-1,-101,-2,-35,-2,6,-1,-37,-2,-33,-3,0,-4,39,-5,-20,-5,113,-4,-21,-5,-88,-5,-81,-4,-41,-3,-35,-3,-64,-3,-3,-3,-125,-3,21,-3,-98,-3,-98,-3,-42,-4,-65,-4,58,-3,-42,-3,123,-2,-122,-2,-12,-2,-50,0,-40,1,-7,0,70,0,-42,-1,7,-1,-44,-1,22,2,-54,2,41,2,5,2,-23,1,15,2,59,3,-45,3,113,3,-72,3,-32,3,-50,2,13,2,22,2,-5,1,8,2,-6,1,92,1,76,1,-46,1,-15,1,88,2,-18,2,89,2,77,1,5,1,62,1,-69,1,-61,1,100,0,-12,-2,-34,-2,8,-1,-77,-2,-108,-2,-92,-2,-98,-2,-48,-2,10,-1,57,-1,-41,-1,66,0,-108,-1,-14,-2,125,-1,-8,-1,56,-1,-7,-3,70,-3,84,-3,19,-3,-112,-5,-112,-6,-28,-5,-104,-3,-103,-3,-11,-4,-15,-4,-52,-3,1,-1,55,-1,0,-1,25,0,-14,0,-73,-1,89,-2,78,-2,-106,-2,-52,-2,11,-1,63,-1,-39,-1,-116,0,-119,0,0,0,110,-1,118,-1,-109,0,-112,1,-122,1,25,2,-49,3,82,4,24,3,127,2,43,3,89,3,-63,2,-128,2,-94,2,15,3,127,3,122,2,107,0,-4,-1,12,1,-101,1,-13,1,96,2,5,2,-104,1,-36,1,72,2,-9,2,-85,3,26,3,-66,1,63,1,121,1,87,1,-81,0,-20,-1,120,-1,-123,-1,107,-1,44,-2,-48,-4,107,-3,-31,-2,23,-1,-91,-1,-117,1,10,2,-68,0,48,0,120,0,-78,0}; }
	private static byte[] data8(){ return new byte[] {58,1,118,1,-41,0,120,0,-31,0,75,1,-27,0,-70,-1,-12,-2,36,-1,-125,-1,-25,-1,109,0,97,0,-31,-1,-49,-1,3,0,20,0,98,0,47,1,-47,1,-42,1,64,2,93,3,48,3,106,1,-122,0,-44,0,-12,0,95,1,51,2,74,2,-7,1,21,2,111,2,-59,2,-77,2,30,2,-64,1,-89,1,105,1,111,1,-43,1,9,2,14,2,-121,2,-97,3,20,4,-52,2,85,1,61,1,63,1,-90,0,94,0,15,0,127,-1,110,-1,61,-1,-63,-2,124,-1,-32,0,16,1,-58,0,81,1,-55,1,39,1,39,0,-22,-1,16,0,-124,-1,-53,-2,20,-1,-39,-1,42,0,98,0,-115,0,-11,-1,7,-1,-48,-2,-21,-2,-107,-2,-119,-2,80,-1,-8,-1,32,0,97,0,-107,0,103,0,-15,-1,58,-1,-23,-2,124,-1,-84,-1,-8,-2,-26,-2,-102,-1,-49,-1,-123,-1,49,-1,29,-1,-52,-1,-96,0,-93,0,101,0,74,0,0,0,21,0,-100,0,-39,0,35,1,102,1,-74,0,9,0,-93,0,-119,1,-18,1,7,2,-94,1,80,1,-61,1,-17,1,107,1,41,1,-24,0,98,0,-112,0,4,1,-114,0,-9,-1,32,0,98,0,97,0,-100,0,22,1,59,1,-63,0,42,0,-18,-1,-54,-1,-62,-1,49,0,-73,0,-43,0,-110,0,-54,-1,-20,-2,43,-1,85,0,-18,0,-97,0,99,0,-74,0,-13,0,-88,0,115,0,-115,0,46,0,-83,-1,34,0,-48,0,-113,0,-10,-1,-73,-1,-59,-1,52,0,-48,0,40,1,109,1,-63,1,-24,1,-55,1,99,1,16,1,19,1,111,0,-33,-2,64,-2,43,-1,10,0,-85,0,-90,1,-38,1,-62,0,-7,-1,8,0,-56,-1,67,-1,127,-1,3,0,-42,-1,120,-1,-112,-1,-71,-1,-51,-1,21,0,61,0,18,0,7,0,58,0,100,0,-124,0,-118,0,70,0,-22,-1,-23,-1,37,0,9,0,-83,-1,126,-1,42,-1,120,-2,51,-2,-53,-2,108,-1,64,-1,-55,-2,17,-1,-57,-1,-45,-1,126,-1,93,-1,-9,-2,-94,-2,-1,-2,40,-1,-21,-2,49,-1,86,-1,-51,-2,-82,-2,12,-1,52,-1,108,-1,-96,-1,-108,-1,-76,-1,-91,-1,-16,-2,101,-2,-102,-2,92,-1,81,0,-49,0,-85,0,120,0,91,0,67,0,69,0,78,0,114,0,123,0,-3,-1,-92,-1,-23,-1,42,0,-97,0,103,1,72,1,104,0,24,0,26,0,18,0,103,0,-68,0,-53,0,4,1,34,1,-122,0,79,-1,101,-2,-101,-2,46,-1,-1,-2,-30,-2,-120,-1,-47,-1,93,-1,30,-1,65,-1,53,-1,-7,-2,32,-1,-95,-1,-86,-1,119,-1,-28,-1,56,0,-49,-1,-110,-1,-109,-1,63,-1,20,-1,59,-1,78,-1,71,-1,-34,-2,-118,-2,126,-1,-86,0,-125,0,52,0,113,0,20,0,-97,-1,25,0,113,0,41,0,91,0,-44,0,-113,0,56,0,-105,0,-49,0,-102,0,-33,0,88,1,36,1,-94,0,59,0,-2,-1,97,0,-27,0,-106,0,32,0,18,0,-14,-1,55,0,23,1,83,1,-33,0,-40,0,9,1,-10,0,-29,0,-58,0,-113,0,105,0,36,0,-81,-1,121,-1,-94,-1,-124,-1,-60,-2,84,-2,-8,-2,-98,-1,-114,-1,-29,-1,-104,0,39,0,-17,-2,-107,-2,-20,-2,17,-1,66,-1,-67,-1,-27,-1,-119,-1,86,-1,-85,-1,36,0,68,0,-32,-1,81,-1,67,-1,-87,-1,-60,-1,102,-1,19,-1,39,-1,84,-1,45,-1,57,-1,19,0,-70,0,48,0,-121,-1,-84,-1,-8,-1,-18,-1,-68,-1,-117,-1,121,-1,47,-1,127,-2,50,-2,-110,-2,-3,-2,82,-1,94,-1,-52,-2,121,-2,-7,-2,85,-1,85,-1,-83,-1,-2,-1,-75,-1,79,-1,85,-1,-110,-1,-93,-1,-84,-1,-5,-1,43,0,2,0,50,0,-91,0,110,0,-19,-1,-45,-1,-87,-1,-106,-1,76,0,-24,0,101,0,-65,-1,-12,-1,76,0,2,0,-103,-1,-72,-1,-9,-1,-71,-1,105,-1,-78,-1,15,0,-50,-1,99,-1,92,-1,112,-1,-128,-1,-64,-1,-30,-1,-73,-1,-57,-1,86,0,-26,0,-7,0,-79,0,119,0,105,0,89,0,74,0,89,0,95,0,45,0,-50,-1,-102,-1,-28,-1,50,0,9,0,0,0,63,0,26,0,-37,-1,30,0,93,0,84,0,115,0,-105,0,127,0,76,0,49,0,124,0,-73,0,25,0,116,-1,-104,-1,-123,-1,4,-1,64,-1,-3,-1,51,0,9,0,33,0,-109,0,-66,0,56,0,-20,-1,60,0,25,0,-87,-1,15,0,-81,0,-104,0,53,0,-45,-1,-119,-1,-83,-1,-35,-1,-71,-1,-109,-1,94,-1,24,-1,110,-1,42,0,89,0,39,0,77,0,-125,0,64,0,-45,-1,-63,-1,-15,-1,-5,-1,-35,-1,-53,-1,-55,-1,-50,-1,-44,-1,-65,-1}; }
	private static byte[] data9(){ return new byte[] {-106,-1,-94,-1,-23,-1,4,0,-32,-1,-28,-1,25,0,41,0,12,0,-13,-1,14,0,110,0,-101,0,44,0,-77,-1,-85,-1,-73,-1,-72,-1,-2,-1,68,0,54,0,32,0,41,0,-20,-1,109,-1,71,-1,-121,-1,-124,-1,22,-1,-42,-2,28,-1,-87,-1,3,0,30,0,88,0,-113,0,66,0,-45,-1,-46,-1,-35,-1,-74,-1,-60,-1,-13,-1,0,0,18,0,-3,-1,-110,-1,71,-1,107,-1,-81,-1,-32,-1,32,0,-107,0,2,1,-29,0,114,0,-127,0,-32,0,-59,0,103,0,90,0,105,0,90,0,65,0,37,0,45,0,95,0,93,0,40,0,-11,-1,-70,-1,-69,-1,15,0,38,0,5,0,22,0,0,0,-66,-1,-37,-1,14,0,22,0,115,0,-43,0,-109,0,39,0,48,0,114,0,115,0,21,0,-82,-1,-113,-1,-109,-1,-101,-1,-64,-1,-24,-1,6,0,39,0,34,0,-17,-1,-49,-1,-27,-1,-4,-1,-37,-1,-54,-1,-2,-1,-39,-1,71,-1,50,-1,-114,-1,-60,-1,4,0,37,0,-61,-1,-123,-1,-73,-1,-63,-1,-50,-1,36,0,75,0,42,0,27,0,42,0,64,0,35,0,-43,-1,-58,-1,-11,-1,-6,-1,-31,-1,-36,-1,-29,-1,-26,-1,-46,-1,-50,-1,24,0,90,0,54,0,-13,-1,-12,-1,43,0,59,0,-1,-1,-35,-1,-8,-1,-14,-1,-12,-1,89,0,-96,0,107,0,59,0,70,0,67,0,24,0,-37,-1,-73,-1,-58,-1,-58,-1,-101,-1,-103,-1,-53,-1,-23,-1,-2,-1,13,0,-55,-1,110,-1,127,-1,-79,-1,-100,-1,-105,-1,-47,-1,-2,-1,4,0,-9,-1,-8,-1,52,0,103,0,71,0,24,0,-15,-1,-64,-1,-72,-1,-46,-1,-51,-1,-54,-1,-39,-1,-38,-1,-25,-1,9,0,34,0,30,0,8,0,43,0,-127,0,106,0,-13,-1,-51,-1,-32,-1,-45,-1,-41,-1,-38,-1,-77,-1,-95,-1,-91,-1,-102,-1,-84,-1,-27,-1,18,0,17,0,-4,-1,21,0,77,0,66,0,24,0,24,0,21,0,9,0,21,0,17,0,-6,-1,-5,-1,36,0,72,0,32,0,-44,-1,-41,-1,-22,-1,-51,-1,-5,-1,86,0,49,0,-21,-1,1,0,12,0,-21,-1,-1,-1,42,0,35,0,34,0,94,0,-128,0,43,0,-48,-1,-28,-1,-21,-1,-126,-1,68,-1,-127,-1,-63,-1,-63,-1,-62,-1,-4,-1,63,0,62,0,24,0,28,0,50,0,35,0,-2,-1,-34,-1,-41,-1,-16,-1,5,0,0,0,-22,-1,-32,-1,-22,-1,-23,-1,-45,-1,-29,-1,19,0,25,0,-4,-1,-14,-1,-7,-1,-8,-1,-11,-1,-11,-1,0,0,17,0,4,0,-18,-1,7,0,45,0,38,0,35,0,87,0,116,0,70,0,22,0,11,0,8,0,8,0,14,0,1,0,-18,-1,4,0,43,0,24,0,-27,-1,-27,-1,15,0,47,0,31,0,-31,-1,-47,-1,18,0,42,0,31,0,84,0,100,0,21,0,-4,-1,23,0,8,0,-7,-1,-20,-1,-44,-1,-31,-1,-35,-1,-56,-1,-3,-1,31,0,-14,-1,-14,-1,0,0,-34,-1,-1,-1,55,0,35,0,19,0,16,0,-1,-1,30,0,31,0,-36,-1,-39,-1,-22,-1,-63,-1,-35,-1,32,0,17,0,5,0,2,0,-68,-1,-96,-1,-41,-1,-12,-1,-12,-1,-14,-1,-33,-1,-38,-1,-30,-1,-36,-1,-26,-1,-5,-1,-4,-1,-8,-1,-6,-1,3,0,24,0,20,0,-11,-1,-8,-1,21,0,14,0,-6,-1,6,0,26,0,19,0,3,0,0,0,1,0,2,0,-8,-1,-27,-1,-26,-1,-14,-1,-25,-1,-31,-1,-4,-1,20,0,29,0,29,0,22,0,35,0,61,0,51,0,22,0,15,0,17,0,10,0,-2,-1,-8,-1,12,0,17,0,-23,-1,-36,-1,-6,-1,-4,-1,-10,-1,18,0,23,0,-9,-1,-13,-1,18,0,26,0,13,0,33,0,56,0,26,0,-8,-1,-2,-1,6,0,11,0,30,0,35,0,23,0,11,0,5,0,28,0,66,0,54,0,15,0,3,0,3,0,12,0,27,0,16,0,8,0,22,0,16,0,-1,-1,2,0,6,0,9,0,16,0,16,0,18,0,16,0,2,0,-1,-1,-1,-1,-4,-1,9,0,17,0,0,0,-4,-1,-3,-1,-30,-1,-45,-1,-30,-1,-10,-1,1,0,-9,-1,-25,-1,-10,-1,8,0,-4,-1,-5,-1,11,0,11,0,0,0,-7,-1,0,0,5,0,-12,-1,-18,-1,10,0,19,0,-1,-1,-2,-1,0,0,-15,-1,-21,-1,-23,-1,-32,-1,-25,-1,-13,-1,-26,-1,-35,-1,-23,-1,-27,-1,-44,-1,-29,-1,10,0,24,0,10,0,-1,-1,-3,-1,-4,-1,-1,-1,7,0,16,0,12,0,5,0,16,0,35,0,34,0,18,0,-1,-1,-11,-1,2,0,22,0,18,0,2,0,-1,-1,-3,-1,-1,-1,7,0,15,0,24,0,31,0}; }
	private static byte[] data10(){ return new byte[] {24,0,12,0,20,0,40,0,33,0,5,0,12,0,47,0,38,0,6,0,15,0,32,0,18,0,-2,-1,-10,-1,-7,-1,1,0,-6,-1,-14,-1,1,0,12,0,8,0,3,0,0,0,7,0,24,0,14,0,-5,-1,1,0,4,0,-4,-1,5,0,9,0,-3,-1,-1,-1,9,0,6,0,7,0,12,0,2,0,-10,-1,3,0,31,0,35,0,15,0,15,0,21,0,-2,-1,-10,-1,11,0,17,0,15,0,30,0,26,0,6,0,11,0,20,0,2,0,-15,-1,-12,-1,1,0,7,0,-1,-1,-5,-1,-6,-1,-15,-1,-10,-1,8,0,9,0,4,0,11,0,15,0,8,0,3,0,3,0,16,0,25,0,11,0,3,0,10,0,2,0,-9,-1,2,0,13,0,6,0,1,0,5,0,7,0,4,0,9,0,18,0,14,0,7,0,7,0,4,0,0,0,0,0,0,0,-7,-1,-13,-1,-10,-1,-2,-1,-4,-1,-11,-1,-8,-1,-1,-1,0,0,4,0,6,0,5,0,8,0,2,0,-13,-1,-9,-1,6,0,9,0,8,0,1,0,-11,-1,-12,-1,-11,-1,-8,-1,9,0,8,0,-17,-1,-17,-1,-4,-1,-7,-1,-4,-1,4,0,0,0,-4,-1,-5,-1,-8,-1,-1,-1,10,0,9,0,1,0,-11,-1,-19,-1,-12,-1,-7,-1,-6,-1,-1,-1,-3,-1,-7,-1,-5,-1,-9,-1,-10,-1,0,0,6,0,3,0,-2,-1,-11,-1,-9,-1,-1,-1,-7,-1,-10,-1,-1,-1,7,0,6,0,-2,-1,-6,-1,5,0,6,0,-11,-1,-16,-1,-8,-1,-8,-1,-12,-1,-17,-1,-11,-1,7,0,8,0,-3,-1,8,0,19,0,2,0,-5,-1,0,0,2,0,5,0,6,0,2,0,3,0,-1,-1,-9,-1,-7,-1,-2,-1,-5,-1,-3,-1,-1,-1,1,0,9,0,11,0,4,0,-1,-1,0,0,5,0,8,0,1,0,-2,-1,0,0,1,0,1,0,2,0,5,0,9,0,2,0,-7,-1,6,0,21,0,4,0,-12,-1,0,0,12,0,6,0,0,0,1,0,-3,-1,-4,-1,5,0,10,0,-2,-1,-9,-1,0,0,7,0,0,0,-11,-1,-13,-1,-3,-1,4,0,1,0,-3,-1,-2,-1,-3,-1,0,0,4,0,-1,-1,-7,-1,-7,-1,-13,-1,-12,-1,0,0,0,0,-11,-1,-8,-1,0,0,-2,-1,-9,-1,-14,-1,-12,-1,-6,-1,-1,-1,-2,-1,-11,-1,-13,-1,1,0,6,0,-8,-1,-6,-1,10,0,5,0,-9,-1,-4,-1,3,0,0,0,-4,-1,-4,-1,2,0,4,0,-6,-1,-8,-1,4,0,3,0,-6,-1,-3,-1,-1,-1,-3,-1,-1,-1,-3,-1,-5,-1,0,0,0,0,-4,-1,-4,-1,-4,-1,-3,-1,3,0,2,0,-4,-1,-3,-1,2,0,0,0,-5,-1,-5,-1,2,0,0,0,-8,-1,-4,-1,2,0,-1,-1,-4,-1,-2,-1,2,0,6,0,0,0,-9,-1,-5,-1,6,0,9,0,0,0,-4,-1,1,0,3,0,-5,-1,-5,-1,3,0,1,0,-5,-1,-4,-1,-3,-1,-4,-1,-1,-1,0,0,0,0,3,0,3,0,1,0,1,0,0,0,2,0,0,0,-5,-1,-1,-1,9,0,6,0,-1,-1,0,0,1,0,1,0,6,0,5,0,1,0,3,0,5,0,-1,-1,-2,-1,3,0,6,0,2,0,0,0,0,0,4,0,4,0,-5,-1,-7,-1,9,0,14,0,-1,-1,-6,-1,4,0,8,0,7,0,5,0,-2,-1,-1,-1,9,0,6,0,-6,-1,-6,-1,4,0,5,0,-2,-1,-8,-1,-6,-1,-1,-1,4,0,2,0,-9,-1,-12,-1,0,0,8,0,-1,-1,-9,-1,-3,-1,-1,-1,-7,-1,-6,-1,-3,-1,-12,-1,-13,-1,0,0,1,0,-7,-1,-6,-1,-9,-1,-9,-1,2,0,-2,-1,-17,-1,-5,-1}; }
	private static byte[] getData(){
		byte[] data = new byte[11044];
		System.arraycopy(data0(), 0, data, 0, 1024);
		System.arraycopy(data1(), 0, data, 1024, 1024);
		System.arraycopy(data2(), 0, data, 2048, 1024);
		System.arraycopy(data3(), 0, data, 3072, 1024);
		System.arraycopy(data4(), 0, data, 4096, 1024);
		System.arraycopy(data5(), 0, data, 5120, 1024);
		System.arraycopy(data6(), 0, data, 6144, 1024);
		System.arraycopy(data7(), 0, data, 7168, 1024);
		System.arraycopy(data8(), 0, data, 8192, 1024);
		System.arraycopy(data9(), 0, data, 9216, 1024);
		System.arraycopy(data10(), 0, data, 10240, 804);
		return data;
	}
	/** Constructs a new AudioClip with the data from pop.wav. */
	public pop(){
		data = getData();
		format = new AudioFormat(AudioFormat.Encoding.PCM_UNSIGNED, (float)(44100.0), 16, 1, 2, (float)(44100.0), false);
		lineInfo = new DataLine.Info(SourceDataLine.class, format, AudioSystem.NOT_SPECIFIED);
		try{ AudioSystem.getLine(lineInfo); }
		catch(IllegalArgumentException ex){ lineInfo = null; }
		catch(LineUnavailableException e){}
	}
	/** A separate thread for playing pop.wav. */
	private class PlayThread extends Thread {
		private byte[] data;
		private AudioFormat format;
		private DataLine.Info lineInfo;
		private SourceDataLine line = null;
		private boolean playing = true;
		public PlayThread(byte[] d, AudioFormat f, DataLine.Info i){ data = d; format = f; lineInfo = i; }
		public void run(){
			try{
				line = (SourceDataLine) AudioSystem.getLine(lineInfo);
				line.open(format, AudioSystem.NOT_SPECIFIED);
				line.start();
				int written = 0;
				int available;
				while(written < data.length && playing){
					available = Math.min(line.available(), data.length - written);
					line.write(data, written, available);
					written += available;
				}
				int frames = data.length / format.getFrameSize();
				while(line.getFramePosition() < frames && playing) Thread.sleep(0);
			}
			catch(InterruptedException ex){ playing = false; }
			catch(LineUnavailableException ex){}
			if(line != null){ line.stop(); line.flush(); line.close(); }
			playing = false;
		}
		public void interrupt(){ playing = false; }
		public boolean isPlaying(){ return playing; }
	}
	/** A separate thread for looping play of pop.wav. */
	private class LoopThread extends Thread {
		private pop clip;
		private boolean looping = true;
		public LoopThread(pop c){ clip = c; }
		public void run(){
			while(looping){
				clip.play();
				while(clip.isPlaying() && looping){
					try{ Thread.sleep(0); }
					catch(InterruptedException ex){ looping = false; break; }
				}
			}
			if(!clip.isLooping()) clip.stop();
		}
		public void interrupt(){ looping = false; }
		public boolean isLooping(){ return looping; }
	}
	/** Plays pop.wav from the beginning, even if it is already playing or looping. */
	public void play(){ if(lineInfo == null) return; doPlay(); }
	private synchronized void doPlay(){
		doStopPlay();
		playThread = new PlayThread(data, format, lineInfo);
		playThread.start();
	}
	/** Plays pop.wav continuously until stopped. */
	public void loop(){ if(lineInfo == null) return; doLoop(); }
	private synchronized void doLoop(){
		doStopLoop();
		loopThread = new LoopThread(this);
		loopThread.start();
	}
	/** Stops play and looping of pop.wav. */
	public void stop(){ if(lineInfo == null) return; doStop(); }
	private synchronized void doStop(){
		doStopPlay();
		doStopLoop();
	}
	private void doStopPlay(){
		if(playThread == null) return;
		if(playThread.isPlaying()) playThread.interrupt();
		playThread = null;
	}
	private void doStopLoop(){
		if(loopThread == null) return;
		if(loopThread.isLooping()) loopThread.interrupt();
		loopThread = null;
	}
	/** Tests if pop.wav is currently playing or looping.
	 * @return <tt>true</tt> if playing or looping, <tt>false</tt> otherwise */
	public boolean isPlaying(){ if(lineInfo == null) return false; return doIsPlaying(); }
	private synchronized boolean doIsPlaying(){
		if(loopThread == null && playThread == null) return false;
		else if(loopThread == null) return playThread.isPlaying();
		else if(playThread == null) return loopThread.isLooping();
		else return loopThread.isLooping() && playThread.isPlaying();
	}
	/** Tests if pop.wav is currently looping.
	 * @return <tt>true</tt> if looping, <tt>false</tt> otherwise */
	public boolean isLooping(){ if(lineInfo == null) return false; return doIsLooping(); }
	private synchronized boolean doIsLooping(){
		if(loopThread == null) return false;
		else return loopThread.isLooping();
	}
}